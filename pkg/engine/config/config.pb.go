// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/config/config.proto

package config

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NodeType int32

const (
	NodeType_MEMBER   NodeType = 0
	NodeType_OBSERVER NodeType = 1
)

var NodeType_name = map[int32]string{
	0: "MEMBER",
	1: "OBSERVER",
}

var NodeType_value = map[string]int32{
	"MEMBER":   0,
	"OBSERVER": 1,
}

func (x NodeType) String() string {
	return proto.EnumName(NodeType_name, int32(x))
}

func (NodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ac523a84bbf07b3d, []int{0}
}

type ProtocolConfig struct {
	HeartbeatPeriod         *time.Duration `protobuf:"bytes,1,opt,name=heartbeat_period,json=heartbeatPeriod,proto3,stdduration" json:"heartbeat_period,omitempty"`
	ElectionTimeout         *time.Duration `protobuf:"bytes,2,opt,name=election_timeout,json=electionTimeout,proto3,stdduration" json:"election_timeout,omitempty"`
	SnapshotEntryThreshold  uint64         `protobuf:"varint,3,opt,name=snapshot_entry_threshold,json=snapshotEntryThreshold,proto3" json:"snapshot_entry_threshold,omitempty"`
	CompactionRetainEntries uint64         `protobuf:"varint,4,opt,name=compaction_retain_entries,json=compactionRetainEntries,proto3" json:"compaction_retain_entries,omitempty"`
}

func (m *ProtocolConfig) Reset()         { *m = ProtocolConfig{} }
func (m *ProtocolConfig) String() string { return proto.CompactTextString(m) }
func (*ProtocolConfig) ProtoMessage()    {}
func (*ProtocolConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac523a84bbf07b3d, []int{0}
}
func (m *ProtocolConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtocolConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtocolConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtocolConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolConfig.Merge(m, src)
}
func (m *ProtocolConfig) XXX_Size() int {
	return m.Size()
}
func (m *ProtocolConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolConfig proto.InternalMessageInfo

func (m *ProtocolConfig) GetHeartbeatPeriod() *time.Duration {
	if m != nil {
		return m.HeartbeatPeriod
	}
	return nil
}

func (m *ProtocolConfig) GetElectionTimeout() *time.Duration {
	if m != nil {
		return m.ElectionTimeout
	}
	return nil
}

func (m *ProtocolConfig) GetSnapshotEntryThreshold() uint64 {
	if m != nil {
		return m.SnapshotEntryThreshold
	}
	return 0
}

func (m *ProtocolConfig) GetCompactionRetainEntries() uint64 {
	if m != nil {
		return m.CompactionRetainEntries
	}
	return 0
}

func init() {
	proto.RegisterEnum("atomix.raft.config.NodeType", NodeType_name, NodeType_value)
	proto.RegisterType((*ProtocolConfig)(nil), "atomix.raft.config.ProtocolConfig")
}

func init() { proto.RegisterFile("storage/config/config.proto", fileDescriptor_ac523a84bbf07b3d) }

var fileDescriptor_ac523a84bbf07b3d = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x8f, 0x31, 0x4b, 0xf3, 0x40,
	0x18, 0xc7, 0x73, 0x7d, 0x4b, 0x29, 0xf7, 0x8a, 0x96, 0x20, 0x9a, 0x56, 0x38, 0x8b, 0x74, 0x28,
	0x0e, 0x09, 0xe8, 0x22, 0x8e, 0xd1, 0x2c, 0x42, 0xb5, 0xc4, 0xe2, 0x1a, 0xae, 0xc9, 0xd3, 0x24,
	0x90, 0xe6, 0x09, 0x97, 0x2b, 0xd8, 0x6f, 0xe1, 0xe8, 0xe4, 0xec, 0x47, 0xf0, 0x23, 0x38, 0x76,
	0x74, 0x53, 0xd3, 0x2f, 0xe1, 0x28, 0xb9, 0x34, 0xba, 0x3a, 0xdd, 0xc3, 0xfd, 0x9e, 0xdf, 0xff,
	0x7f, 0x47, 0x0f, 0x72, 0x89, 0x82, 0x87, 0x60, 0xf9, 0x98, 0xce, 0xe2, 0x70, 0x73, 0x98, 0x99,
	0x40, 0x89, 0xba, 0xce, 0x25, 0xce, 0xe3, 0x7b, 0x53, 0xf0, 0x99, 0x34, 0x2b, 0xd2, 0x63, 0x21,
	0x62, 0x98, 0x80, 0xa5, 0x36, 0xa6, 0x8b, 0x99, 0x15, 0x2c, 0x04, 0x97, 0x31, 0xa6, 0x95, 0xd3,
	0xdb, 0x0d, 0x31, 0x44, 0x35, 0x5a, 0xe5, 0x54, 0xdd, 0x1e, 0x3d, 0x35, 0xe8, 0xf6, 0xb8, 0x9c,
	0x7c, 0x4c, 0x2e, 0x54, 0x90, 0x7e, 0x45, 0x3b, 0x11, 0x70, 0x21, 0xa7, 0xc0, 0xa5, 0x97, 0x81,
	0x88, 0x31, 0x30, 0x48, 0x9f, 0x0c, 0xff, 0x9f, 0x74, 0xcd, 0xaa, 0xc3, 0xac, 0x3b, 0xcc, 0xcb,
	0x4d, 0x87, 0xdd, 0x7c, 0x7c, 0x3f, 0x24, 0xee, 0xce, 0x8f, 0x38, 0x56, 0x5e, 0x99, 0x05, 0x09,
	0xf8, 0xe5, 0x8a, 0x27, 0xe3, 0x39, 0xe0, 0x42, 0x1a, 0x8d, 0x3f, 0x66, 0xd5, 0xe2, 0xa4, 0xf2,
	0xf4, 0x33, 0x6a, 0xe4, 0x29, 0xcf, 0xf2, 0x08, 0xa5, 0x07, 0xa9, 0x14, 0x4b, 0x4f, 0x46, 0x02,
	0xf2, 0x08, 0x93, 0xc0, 0xf8, 0xd7, 0x27, 0xc3, 0xa6, 0xbb, 0x57, 0x73, 0xa7, 0xc4, 0x93, 0x9a,
	0xea, 0xe7, 0xb4, 0xeb, 0xe3, 0x3c, 0xe3, 0xd5, 0x3b, 0x04, 0x48, 0x1e, 0xa7, 0x2a, 0x22, 0x86,
	0xdc, 0x68, 0x2a, 0x75, 0xff, 0x77, 0xc1, 0x55, 0xdc, 0xa9, 0xf0, 0xf1, 0x80, 0xb6, 0xaf, 0x31,
	0x80, 0xc9, 0x32, 0x03, 0x9d, 0xd2, 0xd6, 0xc8, 0x19, 0xd9, 0x8e, 0xdb, 0xd1, 0xf4, 0x2d, 0xda,
	0xbe, 0xb1, 0x6f, 0x1d, 0xf7, 0xce, 0x71, 0x3b, 0xc4, 0x1e, 0x7c, 0x7d, 0x32, 0xf2, 0x5c, 0x30,
	0xf2, 0x52, 0x30, 0xf2, 0x5a, 0x30, 0xb2, 0x2a, 0x18, 0xf9, 0x28, 0x18, 0x79, 0x58, 0x33, 0x6d,
	0xb5, 0x66, 0xda, 0xdb, 0x9a, 0x69, 0xd3, 0x96, 0xfa, 0xeb, 0xe9, 0x77, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x2b, 0x83, 0xb9, 0x5d, 0xdc, 0x01, 0x00, 0x00,
}

func (this *ProtocolConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtocolConfig)
	if !ok {
		that2, ok := that.(ProtocolConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HeartbeatPeriod != nil && that1.HeartbeatPeriod != nil {
		if *this.HeartbeatPeriod != *that1.HeartbeatPeriod {
			return false
		}
	} else if this.HeartbeatPeriod != nil {
		return false
	} else if that1.HeartbeatPeriod != nil {
		return false
	}
	if this.ElectionTimeout != nil && that1.ElectionTimeout != nil {
		if *this.ElectionTimeout != *that1.ElectionTimeout {
			return false
		}
	} else if this.ElectionTimeout != nil {
		return false
	} else if that1.ElectionTimeout != nil {
		return false
	}
	if this.SnapshotEntryThreshold != that1.SnapshotEntryThreshold {
		return false
	}
	if this.CompactionRetainEntries != that1.CompactionRetainEntries {
		return false
	}
	return true
}
func (m *ProtocolConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtocolConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtocolConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompactionRetainEntries != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.CompactionRetainEntries))
		i--
		dAtA[i] = 0x20
	}
	if m.SnapshotEntryThreshold != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.SnapshotEntryThreshold))
		i--
		dAtA[i] = 0x18
	}
	if m.ElectionTimeout != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.ElectionTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ElectionTimeout):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintConfig(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x12
	}
	if m.HeartbeatPeriod != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.HeartbeatPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.HeartbeatPeriod):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintConfig(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedProtocolConfig(r randyConfig, easy bool) *ProtocolConfig {
	this := &ProtocolConfig{}
	if r.Intn(5) != 0 {
		this.HeartbeatPeriod = github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
	}
	if r.Intn(5) != 0 {
		this.ElectionTimeout = github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
	}
	this.SnapshotEntryThreshold = uint64(uint64(r.Uint32()))
	this.CompactionRetainEntries = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyConfig interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneConfig(r randyConfig) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringConfig(r randyConfig) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneConfig(r)
	}
	return string(tmps)
}
func randUnrecognizedConfig(r randyConfig, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldConfig(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldConfig(dAtA []byte, r randyConfig, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateConfig(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateConfig(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateConfig(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateConfig(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateConfig(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateConfig(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateConfig(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ProtocolConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeartbeatPeriod != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.HeartbeatPeriod)
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.ElectionTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ElectionTimeout)
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.SnapshotEntryThreshold != 0 {
		n += 1 + sovConfig(uint64(m.SnapshotEntryThreshold))
	}
	if m.CompactionRetainEntries != 0 {
		n += 1 + sovConfig(uint64(m.CompactionRetainEntries))
	}
	return n
}

func sovConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProtocolConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtocolConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtocolConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeartbeatPeriod == nil {
				m.HeartbeatPeriod = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.HeartbeatPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectionTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ElectionTimeout == nil {
				m.ElectionTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.ElectionTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotEntryThreshold", wireType)
			}
			m.SnapshotEntryThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapshotEntryThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompactionRetainEntries", wireType)
			}
			m.CompactionRetainEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompactionRetainEntries |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfig = fmt.Errorf("proto: unexpected end of group")
)
